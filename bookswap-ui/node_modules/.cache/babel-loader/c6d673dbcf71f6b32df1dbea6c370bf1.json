{"ast":null,"code":"var _jsxFileName = \"/Users/ragir/Desktop/bookswap workspace/bookswap-ui/src/Books.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Button } from 'react-bootstrap';\nimport { Navbar } from 'reactstrap';\nimport Like from \"./Like.js\";\nimport usersbookdata from './usersbookdata.js';\nimport './Library.css';\nimport { Row, Col } from 'reactstrap';\nimport { faHeart } from \"@fortawesome/free-solid-svg-icons\";\nimport { faHeartBroken } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Books extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      message: \"\"\n    };\n    this.stompClient = null;\n\n    this.connect = () => {\n      const Stomp = require(\"stompjs\");\n\n      var SockJS = require(\"sockjs-client\");\n\n      SockJS = new SockJS(\"http://localhost:8080/ws\");\n      this.stompClient = Stomp.over(SockJS);\n      this.stompClient.connect({}, this.onConnected, this.onError);\n    };\n\n    this.onConnected = () => {\n      console.log(\"connected\");\n      console.log(this.props.user);\n      this.stompClient.subscribe(\"/user/\" + this.props.user.username + \"/queue/messages\", this.onMessageReceived);\n      this.props.setWs({\n        socket: this.socket\n      });\n    };\n\n    this.onError = err => {\n      console.log(err);\n    };\n\n    this.onMessageReceived = msg => {\n      const notification = JSON.parse(msg.body);\n      console.log(notification);\n      this.setState({\n        message: notification.content\n      });\n    };\n\n    this.sendMessage = (usernameP, title) => {\n      console.log('sendMessage'); //    var recipientId = '';\n      //    if(this.props.user.username === 'rags2095'){\n      //     recipientId = 'sivani1913'\n      //    }\n      //    else{\n      //        recipientId = 'rags2095'\n      //    }\n      // if (msg.trim() !== \"\") {\n      // const usernameP = 'priya21'\n      // const title = 'Harry Potter'\n\n      const message = {\n        senderId: this.props.user.username,\n        recipientId: usernameP,\n        senderName: this.props.user.username,\n        recipientName: usernameP,\n        content: usernameP + ' liked your book titled ' + title,\n        timestamp: new Date()\n      };\n\n      if (this.stompClient) {\n        this.stompClient.send(\"/app/chat\", {}, JSON.stringify(message));\n      } // }\n\n    };\n  }\n\n  // write a function to call nearby books api\n  componentDidMount() {\n    this.connect();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), this.state.message, /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => this.sendMessage('priya21', 'Harry Potter'),\n        children: \"SEND\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), usersbookdata.map(({\n        username,\n        books\n      }) =>\n      /*#__PURE__*/\n      // border: '2px solid #f4623a', \n      _jsxDEV(\"div\", {\n        style: {\n          margin: '10px',\n          padding: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            class: \"h4 mb-2 \",\n            style: {\n              textDecoration: 'none'\n            },\n            children: username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n          class: \"divider\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: books.map(({\n            title,\n            thumbnailUrl,\n            authors,\n            pageCount\n          }) => /*#__PURE__*/_jsxDEV(Col, {\n            md: 2,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"item\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: thumbnailUrl,\n                  className: \"card-img-top\",\n                  alt: \"...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 105,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card-body\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-muted mb-0\",\n                  children: title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 112,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"card-text\",\n                  children: (authors, pageCount)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 113,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Like, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 117,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  user: state.userReducer\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setWs: data => {\n    const action = {\n      type: 'WS',\n      payload: data\n    };\n    return dispatch(action);\n  }\n});\n\nexport default connect(mapStateToProps)(Books);","map":{"version":3,"sources":["/Users/ragir/Desktop/bookswap workspace/bookswap-ui/src/Books.js"],"names":["React","Component","connect","Button","Navbar","Like","usersbookdata","Row","Col","faHeart","faHeartBroken","FontAwesomeIcon","Books","state","message","stompClient","Stomp","require","SockJS","over","onConnected","onError","console","log","props","user","subscribe","username","onMessageReceived","setWs","socket","err","msg","notification","JSON","parse","body","setState","content","sendMessage","usernameP","title","senderId","recipientId","senderName","recipientName","timestamp","Date","send","stringify","componentDidMount","render","margin","map","books","padding","textDecoration","thumbnailUrl","authors","pageCount","mapStateToProps","userReducer","mapDispatchToProps","dispatch","data","action","type","payload"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { Button } from 'react-bootstrap'\nimport { Navbar } from 'reactstrap';\nimport Like from \"./Like.js\"\nimport usersbookdata from './usersbookdata.js';\nimport './Library.css'\nimport {Row, Col} from 'reactstrap'\nimport { faHeart } from \"@fortawesome/free-solid-svg-icons\";\nimport { faHeartBroken } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nclass Books extends Component {\n\n    state = {\n        message: \"\"\n    }\n\n    stompClient = null;\n\n    // write a function to call nearby books api\n    \n    componentDidMount(){\n        this.connect();\n    }\n\n    connect = () => {\n        const Stomp = require(\"stompjs\");\n        var SockJS = require(\"sockjs-client\");\n        SockJS = new SockJS(\"http://localhost:8080/ws\");\n        this.stompClient = Stomp.over(SockJS);\n        this.stompClient.connect({}, this.onConnected, this.onError);\n      };\n\n       onConnected = () => {\n        console.log(\"connected\");\n        console.log(this.props.user)\n        this.stompClient.subscribe(\n          \"/user/\" + this.props.user.username + \"/queue/messages\",\n          this.onMessageReceived\n        );\n        this.props.setWs({ socket: this.socket });\n      };\n    \n       onError = (err) => {\n        console.log(err);\n      };\n\n      onMessageReceived = (msg) => {\n        const notification = JSON.parse(msg.body);\n        console.log(notification)\n        this.setState({message: notification.content})\n      };\n\n       sendMessage = (usernameP, title) => {\n           console.log('sendMessage')\n        //    var recipientId = '';\n        //    if(this.props.user.username === 'rags2095'){\n        //     recipientId = 'sivani1913'\n        //    }\n        //    else{\n        //        recipientId = 'rags2095'\n        //    }\n        // if (msg.trim() !== \"\") {\n            // const usernameP = 'priya21'\n            // const title = 'Harry Potter'\n          const message = {\n            senderId: this.props.user.username,\n            recipientId: usernameP,\n            senderName: this.props.user.username,\n            recipientName: usernameP,\n            content: usernameP + ' liked your book titled ' + title,\n            timestamp: new Date(),\n          };\n          if(this.stompClient){\n            this.stompClient.send(\"/app/chat\", {}, JSON.stringify(message));\n          }\n          \n    \n        // }\n      };\n\n    render() {\n        return(\n            <div style={{margin: '10px'}}>\n                <Navbar />\n                {this.state.message}\n                <Button\n                    onClick={() => this.sendMessage('priya21', 'Harry Potter')}\n                >SEND</Button>\n                {usersbookdata.map(({username, books}) => (\n                    // border: '2px solid #f4623a', \n                    <div style={{margin: '10px', padding: '10px'}}>\n                        <div className='text-center'>\n                    <a class=\"h4 mb-2 \"style={{textDecoration: 'none'}}>{username}</a>\n                        </div>\n                    <hr class=\"divider\" />\n                    <Row>\n                    {books.map(({title,thumbnailUrl,authors,pageCount}) => (\n                        <Col md={2}>\n\n                            <div className=\"card\">\n                                <div className=\"item\">\n                                    <img\n                                        src={thumbnailUrl}\n                                        className=\"card-img-top\"\n                                        alt=\"...\"\n                                    />\n                                </div>\n                                    <div className=\"card-body\">\n                                        <p className=\"text-muted mb-0\">{title}</p>\n                                        <p className=\"card-text\">\n                                        {authors,pageCount}\n                                        </p>\n                                        {/* <a href=\"#!\" className=\"btn btn-primary\">Button</a> */}\n                                        <Like/>\n                                        {/* {this.sendMessage(username, title)} */}\n                                        {/* <a href=\"#!\" onclick=\"myFunction(this)\" className=\"like\"> \n                                            <img src=\"./icons/emptyHeart.jpg\" alt=\"Like\" width=\"32px\" height=\"32px\" viewBox=\"0 0 20 20\"> </img>\n                                        </a> */}\n                                        \n                                    </div>\n\n                                        \n                                        {/* <div class=\"card\" style={{width: '18 rem'}}>\n                                            <img class=\"card-img-top\" src=\"...\" alt=\"Card image cap\"/>\n                                            <div class=\"card-body\">\n                                                <p class=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p>\n                                            </div>\n                                        </div> */}\n                            </div>\n                        </Col>\n                    ))}\n                </Row>\n                </div>\n\n                ))}\n                \n\n                {/* books page which will be sorted by nearest place and grouped by username, like [{username1: [book1, book2]}, {username2: [book2,book3,book4]}]. */}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    user: state.userReducer\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    setWs: (data) => {\n        const action = {\n            type: 'WS',\n            payload: data\n        }\n        return dispatch(action)\n    }\n})\n\n\nexport default connect(mapStateToProps)(Books)"]},"metadata":{},"sourceType":"module"}