{"ast":null,"code":"var _jsxFileName = \"/Users/ragir/Desktop/bookswap workspace/bookswap-ui/src/Login.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { InputGroup, FormControl, Button } from 'react-bootstrap';\nimport { API_BASE_URL } from './constants';\nimport { Redirect } from 'react-router-dom';\nimport './Login.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Login extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      usernameOrEmail: '',\n      loginPassword: '',\n      username: '',\n      password: '',\n      email: '',\n      area: '',\n      city: '',\n      state: '',\n      country: '',\n      shouldRedirect: false\n    };\n\n    this.login = event => {\n      event.preventDefault();\n      fetch(API_BASE_URL + '/api/auth/signin', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json, text/plain, */*',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          usernameOrEmail: this.state.usernameOrEmail,\n          password: this.state.loginPassword\n        })\n      }).then(res => res.json()).then(res => {\n        console.log(res);\n\n        if (res.accessToken && res.username) {\n          this.props.setUser({\n            token: res.accessToken,\n            username: res.username\n          });\n          this.setState({\n            shouldRedirect: true\n          });\n        }\n      });\n    };\n  }\n\n  // write function to call signup (google about fetch)\n  // write function to call login (this will return accessToken and username in response. Store them in redux)\n  // like this\n  // if (accessToken && username) {\n  //     this.props.setUser({ token: accessToken, username: username })\n  // }\n  // we save the token here to redux so that in some other file, when calling an authenticated api, we can get the token easily from redux (refer Library.js and Books.js)\n  // google about react redux\n  render() {\n    const redirect = this.state.shouldRedirect ? /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/books\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 54\n    }, this) : null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [redirect, /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"container px-4 px-lg-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"row gx-4 gx-lg-5 justify-content-center\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"col-lg-8 col-xl-6 text-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              class: \"mt-0\",\n              children: \"Log In\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n              class: \"divider\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              class: \"text-muted mb-5\",\n              children: \"Connect with book lovers like you!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row gx-4 gx-lg-5 justify-content-center mb-5\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-lg-6\",\n            children: /*#__PURE__*/_jsxDEV(\"form\", {\n              id: \"loginForm\",\n              onSubmit: this.login,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-floating mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  className: \"form-control\",\n                  id: \"email\",\n                  type: \"text\",\n                  placeholder: \"name@example.com\",\n                  value: this.state.usernameOrEmail,\n                  onChange: e => this.setState({\n                    usernameOrEmail: e.target.value\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 100,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  for: \"email\",\n                  children: \"Username or Email address\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 102,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-floating mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  className: \"form-control\",\n                  id: \"phone\",\n                  type: \"password\",\n                  placeholder: \"Password\",\n                  value: this.state.loginPassword,\n                  onChange: e => this.setState({\n                    loginPassword: e.target.value\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 107,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  for: \"phone\",\n                  children: \"Password\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 109,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"d-grid\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-primary btn-xl\",\n                  id: \"loginButton\",\n                  type: \"submit\",\n                  children: \"Submit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 111,\n                  columnNumber: 57\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  setUser: data => {\n    const action = {\n      type: 'SET_USER',\n      payload: data\n    };\n    return dispatch(action);\n  }\n});\n\nexport default connect(null, mapDispatchToProps)(Login);","map":{"version":3,"sources":["/Users/ragir/Desktop/bookswap workspace/bookswap-ui/src/Login.js"],"names":["React","Component","connect","InputGroup","FormControl","Button","API_BASE_URL","Redirect","Login","state","usernameOrEmail","loginPassword","username","password","email","area","city","country","shouldRedirect","login","event","preventDefault","fetch","method","headers","body","JSON","stringify","then","res","json","console","log","accessToken","props","setUser","token","setState","render","redirect","e","target","value","mapDispatchToProps","dispatch","data","action","type","payload"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { InputGroup, FormControl, Button } from 'react-bootstrap'\nimport { API_BASE_URL } from './constants'\nimport { Redirect } from 'react-router-dom'\nimport './Login.css'\n\nclass Login extends Component {\n\n    state = {\n        usernameOrEmail: '',\n        loginPassword: '',\n        username: '',\n        password: '',\n        email: '',\n        area: '',\n        city: '',\n        state: '',\n        country: '',\n        shouldRedirect: false\n    };\n\n    login = event => {\n        event.preventDefault();\n    \n        fetch(API_BASE_URL + '/api/auth/signin', {\n            method: 'post',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ usernameOrEmail: this.state.usernameOrEmail, password: this.state.loginPassword })\n        }).then(res => res.json())\n            .then(res => {\n                console.log(res)\n                if (res.accessToken && res.username) {\n\n                    this.props.setUser({ token: res.accessToken, username: res.username })\n                    this.setState({ shouldRedirect: true })\n                }\n            }\n            );\n    }\n\n    // write function to call signup (google about fetch)\n\n\n    // write function to call login (this will return accessToken and username in response. Store them in redux)\n    // like this\n    // if (accessToken && username) {\n    //     this.props.setUser({ token: accessToken, username: username })\n    // }\n    // we save the token here to redux so that in some other file, when calling an authenticated api, we can get the token easily from redux (refer Library.js and Books.js)\n    // google about react redux\n\n    render() {\n        const redirect = this.state.shouldRedirect ? <Redirect to=\"/books\" /> : null\n        return (\n\n            <div>\n                {redirect}\n\n                {/* <InputGroup size=\"sm\" className=\"mb-3\">\n                    <InputGroup.Prepend>\n                        <InputGroup.Text id=\"inputGroup-sizing-sm\">Username/Email</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl \n                        value={this.state.usernameOrEmail}\n                        onChange={e => this.setState({ usernameOrEmail: e.target.value })}\n                        aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" />\n                </InputGroup>\n                <br />\n                <InputGroup className=\"mb-3\">\n                    <InputGroup.Prepend>\n                        <InputGroup.Text id=\"inputGroup-sizing-default\">Password</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                        aria-label=\"Default\"\n                        aria-describedby=\"inputGroup-sizing-default\"\n                        value={this.state.password}\n                        onChange={e => this.setState({ password: e.target.value })}\n                    />\n                </InputGroup>\n                <Button\n                    onClick={this.login}\n                >LOGIN</Button> */}\n\n                <div class=\"container px-4 px-lg-5\">\n                    <div class=\"row gx-4 gx-lg-5 justify-content-center\">\n                        <div class=\"col-lg-8 col-xl-6 text-center\">\n                            <h2 class=\"mt-0\">Log In</h2>\n                            <hr class=\"divider\" />\n                            <p class=\"text-muted mb-5\">Connect with book lovers like you!</p>\n                        </div>\n                    </div>\n                    <div className=\"row gx-4 gx-lg-5 justify-content-center mb-5\">\n                        <div className=\"col-lg-6\">\n                            <form id=\"loginForm\" onSubmit={this.login}>\n                                <div className=\"form-floating mb-3\">\n                                    <input className=\"form-control\" id=\"email\" type=\"text\" placeholder=\"name@example.com\" value={this.state.usernameOrEmail}\n                        onChange={e => this.setState({ usernameOrEmail: e.target.value })}/>\n                                    <label for=\"email\">Username or Email address</label>\n                                    {/* <div className=\"invalid-feedback\" data-sb-feedback=\"email:required\">An email is required.</div>\n                                    <div className=\"invalid-feedback\" data-sb-feedback=\"email:email\">Email is not valid.</div> */}\n                                </div>\n                                <div className=\"form-floating mb-3\">\n                                    <input className=\"form-control\" id=\"phone\" type=\"password\" placeholder=\"Password\" value={this.state.loginPassword}\n                        onChange={e => this.setState({ loginPassword: e.target.value })}/>\n                                    <label for=\"phone\">Password</label>\n                                </div>\n                                <div className=\"d-grid\"><button className=\"btn btn-primary btn-xl\" id=\"loginButton\" type=\"submit\">Submit</button></div>\n                            </form>\n                        </div>\n                    </div>\n                    {/* <div className=\"row gx-4 gx-lg-5 justify-content-center\">\n                        <div className=\"col-lg-4 text-center mb-5 mb-lg-0\">\n                            <h2 class=\"mt-0\">Sign Up</h2>\n                            <hr class=\"divider\" />\n                            <p class=\"text-muted mb-5\">It's quick and Easy.</p>\n                        </div>\n                    </div>\n                    <div className=\"row gx-4 gx-lg-5 justify-content-center mb-5\">\n                        <div className=\"col-lg-6\">\n                            <form id=\"signupForm\" onSubmit={this.signUp}>\n                                <div className=\"form-floating mb-3\">\n                                    <input className=\"form-control\" id=\"email\" type=\"text\" placeholder=\"name@example.com\" data-sb-validations=\"required,email\" />\n                                    <label for=\"email\">Username</label>\n                                    <div className=\"invalid-feedback\" data-sb-feedback=\"email:required\">An email is required.</div>\n                                    <div className=\"invalid-feedback\" data-sb-feedback=\"email:email\">Email is not valid.</div>\n                                </div>\n                                <div className=\"form-floating mb-3\">\n                                    <input className=\"form-control\" id=\"email\" type=\"email\" placeholder=\"name@example.com\" data-sb-validations=\"required,email\" />\n                                    <label for=\"email\">Email</label>\n                                    <div className=\"invalid-feedback\" data-sb-feedback=\"email:required\">An email is required.</div>\n                                    <div className=\"invalid-feedback\" data-sb-feedback=\"email:email\">Email is not valid.</div>\n                                </div>\n                                <div className=\"form-floating mb-3\">\n                                    <input className=\"form-control\" id=\"phone\" type=\"password\" placeholder=\"Password\" data-sb-validations=\"required\" />\n                                    <label for=\"phone\">Password</label>\n                                    <div className=\"invalid-feedback\" data-sb-feedback=\"phone:required\">A phone number is required.</div>\n                                </div>\n                                <div className=\"form-floating mb-3\">\n                                    <input className=\"form-control\" id=\"email\" type=\"text\" placeholder=\"name@example.com\" data-sb-validations=\"required,email\" />\n                                    <label for=\"email\">Area</label>\n                                    <div className=\"invalid-feedback\" data-sb-feedback=\"email:required\">An email is required.</div>\n                                    <div className=\"invalid-feedback\" data-sb-feedback=\"email:email\">Email is not valid.</div>\n                                </div>\n                                <div className=\"form-floating mb-3\">\n                                    <input className=\"form-control\" id=\"email\" type=\"text\" placeholder=\"name@example.com\" data-sb-validations=\"required,email\" />\n                                    <label for=\"email\">City</label>\n                                    <div className=\"invalid-feedback\" data-sb-feedback=\"email:required\">An email is required.</div>\n                                    <div className=\"invalid-feedback\" data-sb-feedback=\"email:email\">Email is not valid.</div>\n                                </div>\n                                <div className=\"form-floating mb-3\">\n                                    <input className=\"form-control\" id=\"email\" type=\"text\" placeholder=\"name@example.com\" data-sb-validations=\"required,email\" />\n                                    <label for=\"email\">State</label>\n                                    <div className=\"invalid-feedback\" data-sb-feedback=\"email:required\">An email is required.</div>\n                                    <div className=\"invalid-feedback\" data-sb-feedback=\"email:email\">Email is not valid.</div>\n                                </div>\n                                <div className=\"form-floating mb-3\">\n                                    <input className=\"form-control\" id=\"email\" type=\"text\" placeholder=\"name@example.com\" data-sb-validations=\"required,email\" />\n                                    <label for=\"email\">Country</label>\n                                    <div className=\"invalid-feedback\" data-sb-feedback=\"email:required\">An email is required.</div>\n                                    <div className=\"invalid-feedback\" data-sb-feedback=\"email:email\">Email is not valid.</div>\n                                </div>\n                                <div className=\"d-grid\"><button className=\"btn btn-primary btn-xl\" id=\"signupButton\" type=\"submit\">Submit</button></div>\n                            </form>\n                        </div>\n                    </div> */}\n                </div>\n\n\n                {/* sign up/login page, with email, username, password, name, area, city, state, country. (if email or username is already registered, we will throw error). */}\n            </div>\n        )\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    setUser: (data) => {\n        const action = {\n            type: 'SET_USER',\n            payload: data\n        }\n        return dispatch(action)\n    }\n})\n\nexport default connect(null, mapDispatchToProps)(Login)"]},"metadata":{},"sourceType":"module"}