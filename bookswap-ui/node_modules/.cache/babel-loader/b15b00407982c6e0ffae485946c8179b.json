{"ast":null,"code":"var _jsxFileName = \"/Users/ragir/Desktop/bookswap workspace/bookswap-ui/src/Books.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Books extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      message: \"\"\n    };\n    this.stompClient = null;\n\n    this.connect = () => {\n      const Stomp = require(\"stompjs\");\n\n      var SockJS = require(\"sockjs-client\");\n\n      SockJS = new SockJS(\"http://localhost:8080/ws\");\n      this.stompClient = Stomp.over(SockJS);\n      this.stompClient.connect({}, this.onConnected, this.onError);\n    };\n\n    this.onConnected = () => {\n      console.log(\"connected\");\n      this.stompClient.subscribe(\"/user/\" + this.props.user.username + \"/queue/messages\", this.onMessageReceived);\n    };\n\n    this.onError = err => {\n      console.log(err);\n    };\n\n    this.onMessageReceived = msg => {\n      const notification = JSON.parse(msg.body);\n      console.log(notification);\n      this.setState({\n        message: notification\n      });\n    };\n\n    this.sendMessage = () => {\n      var recipientId = '';\n\n      if (this.props.user.username === 'rags2095') {\n        recipientId = 'sivani1913';\n      } else {\n        recipientId = 'rags2095';\n      } // if (msg.trim() !== \"\") {\n\n\n      const message = {\n        senderId: this.props.user.username,\n        recipientId: recipientId,\n        senderName: this.props.user.username,\n        recipientName: recipientId,\n        content: 'Hi ' + recipientId + '! This is a message from ' + this.props.user.username,\n        timestamp: new Date()\n      };\n      this.stompClient.send(\"/app/chat\", {}, JSON.stringify(message)); // }\n    };\n  }\n\n  // write a function to call nearby books api\n  componentDidMount() {\n    this.connect();\n\n    if (this.props.user.username === 'rags2095') {\n      this.sendMessage();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  user: state.userReducer\n});\n\nexport default connect(mapStateToProps)(Books);","map":{"version":3,"sources":["/Users/ragir/Desktop/bookswap workspace/bookswap-ui/src/Books.js"],"names":["React","Component","connect","Books","state","message","stompClient","Stomp","require","SockJS","over","onConnected","onError","console","log","subscribe","props","user","username","onMessageReceived","err","msg","notification","JSON","parse","body","setState","sendMessage","recipientId","senderId","senderName","recipientName","content","timestamp","Date","send","stringify","componentDidMount","render","mapStateToProps","userReducer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux';\n\nclass Books extends Component {\n\n    state = {\n        message: \"\"\n    }\n\n    stompClient = null;\n\n    // write a function to call nearby books api\n    \n    componentDidMount(){\n        this.connect();\n        if(this.props.user.username === 'rags2095'){\n            this.sendMessage();\n        }\n    }\n\n    connect = () => {\n        const Stomp = require(\"stompjs\");\n        var SockJS = require(\"sockjs-client\");\n        SockJS = new SockJS(\"http://localhost:8080/ws\");\n        this.stompClient = Stomp.over(SockJS);\n        this.stompClient.connect({}, this.onConnected, this.onError);\n      };\n\n       onConnected = () => {\n        console.log(\"connected\");\n        this.stompClient.subscribe(\n          \"/user/\" + this.props.user.username + \"/queue/messages\",\n          this.onMessageReceived\n        );\n      };\n    \n       onError = (err) => {\n        console.log(err);\n      };\n\n      onMessageReceived = (msg) => {\n        const notification = JSON.parse(msg.body);\n        console.log(notification)\n        this.setState({message: notification})\n      };\n\n       sendMessage = () => {\n           var recipientId = '';\n           if(this.props.user.username === 'rags2095'){\n            recipientId = 'sivani1913'\n           }\n           else{\n               recipientId = 'rags2095'\n           }\n        // if (msg.trim() !== \"\") {\n          const message = {\n            senderId: this.props.user.username,\n            recipientId: recipientId,\n            senderName: this.props.user.username,\n            recipientName: recipientId,\n            content: 'Hi '+ recipientId + '! This is a message from ' + this.props.user.username,\n            timestamp: new Date(),\n          };\n          this.stompClient.send(\"/app/chat\", {}, JSON.stringify(message));\n    \n        // }\n      };\n\n    render() {\n        return(\n            <div>\n                {this.state.message}\n                {/* books page which will be sorted by nearest place and grouped by username, like [{username1: [book1, book2]}, {username2: [book2,book3,book4]}]. */}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    user: state.userReducer\n})\n\nexport default connect(mapStateToProps)(Books)"]},"metadata":{},"sourceType":"module"}